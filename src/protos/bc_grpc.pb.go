// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BcClient is the client API for Bc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BcClient interface {
	GetRoveredBlockHash(ctx context.Context, in *GetRoveredBlockHashRequest, opts ...grpc.CallOption) (*Block, error)
	GetRoveredBlockHeight(ctx context.Context, in *GetRoveredBlockHeightRequest, opts ...grpc.CallOption) (*Block, error)
	GetRoveredBlocks(ctx context.Context, in *GetRoveredBlocksRequest, opts ...grpc.CallOption) (*GetRoveredBlocksResponse, error)
	GetLatestRoveredBlocks(ctx context.Context, in *Null, opts ...grpc.CallOption) (*GetRoveredBlocksResponse, error)
	GetNrgSupply(ctx context.Context, in *Null, opts ...grpc.CallOption) (*GetNrgSupplyResponse, error)
	GetBlockHash(ctx context.Context, in *GetBlockHashRequest, opts ...grpc.CallOption) (*BcBlock, error)
	GetBlockHeight(ctx context.Context, in *GetBlockHeightRequest, opts ...grpc.CallOption) (*BcBlock, error)
	GetBlocksHeight(ctx context.Context, in *GetBlockHeightRequest, opts ...grpc.CallOption) (*GetBlocksResponse, error)
	GetBlocks(ctx context.Context, in *GetBlocksRequest, opts ...grpc.CallOption) (*GetBlocksResponse, error)
	GetLatestBlock(ctx context.Context, in *Null, opts ...grpc.CallOption) (*BcBlock, error)
	GetLatestUTXOBlock(ctx context.Context, in *Null, opts ...grpc.CallOption) (*BcBlock, error)
	GetTx(ctx context.Context, in *GetTxRequest, opts ...grpc.CallOption) (*Transaction, error)
	GetMarkedTx(ctx context.Context, in *GetMarkedTxRequest, opts ...grpc.CallOption) (*MarkedTransaction, error)
	GetMarkedTxsForMatchedOrder(ctx context.Context, in *GetOutPointRequest, opts ...grpc.CallOption) (*GetMarkedTxs, error)
	GetTradeStatus(ctx context.Context, in *GetOutPointRequest, opts ...grpc.CallOption) (*GetTradeStatusResponse, error)
	GetOutpointStatus(ctx context.Context, in *GetOutPointRequest, opts ...grpc.CallOption) (*GetOutPointStatusResponse, error)
	GetTxClaimedBy(ctx context.Context, in *GetOutPointRequest, opts ...grpc.CallOption) (*Transaction, error)
	GetRawMempool(ctx context.Context, in *Null, opts ...grpc.CallOption) (*GetRawMempoolResponse, error)
	GetBlockByTx(ctx context.Context, in *GetTxRequest, opts ...grpc.CallOption) (*BcBlock, error)
	GetRoveredBlockForMarkedTx(ctx context.Context, in *GetMarkedTxRequest, opts ...grpc.CallOption) (*Block, error)
	Help(ctx context.Context, in *Null, opts ...grpc.CallOption) (*HelpResponse, error)
	Stats(ctx context.Context, in *Null, opts ...grpc.CallOption) (*StatsResponse, error)
	GetSettings(ctx context.Context, in *Null, opts ...grpc.CallOption) (*SettingsResponse, error)
	NewTx(ctx context.Context, in *RpcTransaction, opts ...grpc.CallOption) (*RpcTransactionResponse, error)
	SendTx(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*RpcTransactionResponse, error)
	GetEmbBalance(ctx context.Context, in *GetBalanceRequest, opts ...grpc.CallOption) (*GetEmbBalanceResponse, error)
	GetBalance(ctx context.Context, in *GetBalanceRequest, opts ...grpc.CallOption) (*GetBalanceResponse, error)
	GetWallet(ctx context.Context, in *GetBalanceRequest, opts ...grpc.CallOption) (*WalletData, error)
	GetSpendableOutpoints(ctx context.Context, in *GetSpendableCollateralRequest, opts ...grpc.CallOption) (*WalletData, error)
	GetSpendableCollateral(ctx context.Context, in *GetSpendableCollateralRequest, opts ...grpc.CallOption) (*GetSpendableCollateralResponse, error)
	GetUnlockTakerTxParams(ctx context.Context, in *GetUnlockTakerTxParamsRequest, opts ...grpc.CallOption) (*GetUnlockTakerTxParamsResponse, error)
	GetByteFeeMultiplier(ctx context.Context, in *Null, opts ...grpc.CallOption) (*GetByteFeeResponse, error)
	GetTransfers(ctx context.Context, in *TransferRequest, opts ...grpc.CallOption) (*TransferResponse, error)
	GetOpenOrders(ctx context.Context, in *GetSpendableCollateralRequest, opts ...grpc.CallOption) (*GetOpenOrdersResponse, error)
	GetMatchedOrders(ctx context.Context, in *GetSpendableCollateralRequest, opts ...grpc.CallOption) (*GetMatchedOrdersResponse, error)
	GetHistoricalOrders(ctx context.Context, in *GetHistoryRequest, opts ...grpc.CallOption) (*GetHistoricalOrdersResponse, error)
	GetUnmatchedOrders(ctx context.Context, in *GetBalanceRequest, opts ...grpc.CallOption) (*GetOpenOrdersResponse, error)
	GetUTXOLength(ctx context.Context, in *GetUtxoLengthRequest, opts ...grpc.CallOption) (*GetUtxoLengthResponse, error)
	GetSTXOLength(ctx context.Context, in *GetUtxoLengthRequest, opts ...grpc.CallOption) (*GetUtxoLengthResponse, error)
	GetBlake2Bl(ctx context.Context, in *GetBlake2BlRequest, opts ...grpc.CallOption) (*GetBlake2BlResponse, error)
	GetBcAddressViaVanity(ctx context.Context, in *VanityConvertRequest, opts ...grpc.CallOption) (*VanityConvertResponse, error)
	GetCurrentWork(ctx context.Context, in *Null, opts ...grpc.CallOption) (*CurrentWork, error)
	GetSyncStatus(ctx context.Context, in *Null, opts ...grpc.CallOption) (*SyncStatus, error)
	GetFastSyncStatus(ctx context.Context, in *Null, opts ...grpc.CallOption) (*SyncStatus, error)
}

type bcClient struct {
	cc grpc.ClientConnInterface
}

func NewBcClient(cc grpc.ClientConnInterface) BcClient {
	return &bcClient{cc}
}

func (c *bcClient) GetRoveredBlockHash(ctx context.Context, in *GetRoveredBlockHashRequest, opts ...grpc.CallOption) (*Block, error) {
	out := new(Block)
	err := c.cc.Invoke(ctx, "/Bc/GetRoveredBlockHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bcClient) GetRoveredBlockHeight(ctx context.Context, in *GetRoveredBlockHeightRequest, opts ...grpc.CallOption) (*Block, error) {
	out := new(Block)
	err := c.cc.Invoke(ctx, "/Bc/GetRoveredBlockHeight", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bcClient) GetRoveredBlocks(ctx context.Context, in *GetRoveredBlocksRequest, opts ...grpc.CallOption) (*GetRoveredBlocksResponse, error) {
	out := new(GetRoveredBlocksResponse)
	err := c.cc.Invoke(ctx, "/Bc/GetRoveredBlocks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bcClient) GetLatestRoveredBlocks(ctx context.Context, in *Null, opts ...grpc.CallOption) (*GetRoveredBlocksResponse, error) {
	out := new(GetRoveredBlocksResponse)
	err := c.cc.Invoke(ctx, "/Bc/GetLatestRoveredBlocks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bcClient) GetNrgSupply(ctx context.Context, in *Null, opts ...grpc.CallOption) (*GetNrgSupplyResponse, error) {
	out := new(GetNrgSupplyResponse)
	err := c.cc.Invoke(ctx, "/Bc/GetNrgSupply", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bcClient) GetBlockHash(ctx context.Context, in *GetBlockHashRequest, opts ...grpc.CallOption) (*BcBlock, error) {
	out := new(BcBlock)
	err := c.cc.Invoke(ctx, "/Bc/GetBlockHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bcClient) GetBlockHeight(ctx context.Context, in *GetBlockHeightRequest, opts ...grpc.CallOption) (*BcBlock, error) {
	out := new(BcBlock)
	err := c.cc.Invoke(ctx, "/Bc/GetBlockHeight", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bcClient) GetBlocksHeight(ctx context.Context, in *GetBlockHeightRequest, opts ...grpc.CallOption) (*GetBlocksResponse, error) {
	out := new(GetBlocksResponse)
	err := c.cc.Invoke(ctx, "/Bc/GetBlocksHeight", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bcClient) GetBlocks(ctx context.Context, in *GetBlocksRequest, opts ...grpc.CallOption) (*GetBlocksResponse, error) {
	out := new(GetBlocksResponse)
	err := c.cc.Invoke(ctx, "/Bc/GetBlocks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bcClient) GetLatestBlock(ctx context.Context, in *Null, opts ...grpc.CallOption) (*BcBlock, error) {
	out := new(BcBlock)
	err := c.cc.Invoke(ctx, "/Bc/GetLatestBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bcClient) GetLatestUTXOBlock(ctx context.Context, in *Null, opts ...grpc.CallOption) (*BcBlock, error) {
	out := new(BcBlock)
	err := c.cc.Invoke(ctx, "/Bc/GetLatestUTXOBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bcClient) GetTx(ctx context.Context, in *GetTxRequest, opts ...grpc.CallOption) (*Transaction, error) {
	out := new(Transaction)
	err := c.cc.Invoke(ctx, "/Bc/GetTx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bcClient) GetMarkedTx(ctx context.Context, in *GetMarkedTxRequest, opts ...grpc.CallOption) (*MarkedTransaction, error) {
	out := new(MarkedTransaction)
	err := c.cc.Invoke(ctx, "/Bc/GetMarkedTx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bcClient) GetMarkedTxsForMatchedOrder(ctx context.Context, in *GetOutPointRequest, opts ...grpc.CallOption) (*GetMarkedTxs, error) {
	out := new(GetMarkedTxs)
	err := c.cc.Invoke(ctx, "/Bc/GetMarkedTxsForMatchedOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bcClient) GetTradeStatus(ctx context.Context, in *GetOutPointRequest, opts ...grpc.CallOption) (*GetTradeStatusResponse, error) {
	out := new(GetTradeStatusResponse)
	err := c.cc.Invoke(ctx, "/Bc/GetTradeStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bcClient) GetOutpointStatus(ctx context.Context, in *GetOutPointRequest, opts ...grpc.CallOption) (*GetOutPointStatusResponse, error) {
	out := new(GetOutPointStatusResponse)
	err := c.cc.Invoke(ctx, "/Bc/GetOutpointStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bcClient) GetTxClaimedBy(ctx context.Context, in *GetOutPointRequest, opts ...grpc.CallOption) (*Transaction, error) {
	out := new(Transaction)
	err := c.cc.Invoke(ctx, "/Bc/GetTxClaimedBy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bcClient) GetRawMempool(ctx context.Context, in *Null, opts ...grpc.CallOption) (*GetRawMempoolResponse, error) {
	out := new(GetRawMempoolResponse)
	err := c.cc.Invoke(ctx, "/Bc/GetRawMempool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bcClient) GetBlockByTx(ctx context.Context, in *GetTxRequest, opts ...grpc.CallOption) (*BcBlock, error) {
	out := new(BcBlock)
	err := c.cc.Invoke(ctx, "/Bc/GetBlockByTx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bcClient) GetRoveredBlockForMarkedTx(ctx context.Context, in *GetMarkedTxRequest, opts ...grpc.CallOption) (*Block, error) {
	out := new(Block)
	err := c.cc.Invoke(ctx, "/Bc/GetRoveredBlockForMarkedTx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bcClient) Help(ctx context.Context, in *Null, opts ...grpc.CallOption) (*HelpResponse, error) {
	out := new(HelpResponse)
	err := c.cc.Invoke(ctx, "/Bc/Help", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bcClient) Stats(ctx context.Context, in *Null, opts ...grpc.CallOption) (*StatsResponse, error) {
	out := new(StatsResponse)
	err := c.cc.Invoke(ctx, "/Bc/Stats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bcClient) GetSettings(ctx context.Context, in *Null, opts ...grpc.CallOption) (*SettingsResponse, error) {
	out := new(SettingsResponse)
	err := c.cc.Invoke(ctx, "/Bc/GetSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bcClient) NewTx(ctx context.Context, in *RpcTransaction, opts ...grpc.CallOption) (*RpcTransactionResponse, error) {
	out := new(RpcTransactionResponse)
	err := c.cc.Invoke(ctx, "/Bc/NewTx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bcClient) SendTx(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*RpcTransactionResponse, error) {
	out := new(RpcTransactionResponse)
	err := c.cc.Invoke(ctx, "/Bc/SendTx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bcClient) GetEmbBalance(ctx context.Context, in *GetBalanceRequest, opts ...grpc.CallOption) (*GetEmbBalanceResponse, error) {
	out := new(GetEmbBalanceResponse)
	err := c.cc.Invoke(ctx, "/Bc/GetEmbBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bcClient) GetBalance(ctx context.Context, in *GetBalanceRequest, opts ...grpc.CallOption) (*GetBalanceResponse, error) {
	out := new(GetBalanceResponse)
	err := c.cc.Invoke(ctx, "/Bc/GetBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bcClient) GetWallet(ctx context.Context, in *GetBalanceRequest, opts ...grpc.CallOption) (*WalletData, error) {
	out := new(WalletData)
	err := c.cc.Invoke(ctx, "/Bc/GetWallet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bcClient) GetSpendableOutpoints(ctx context.Context, in *GetSpendableCollateralRequest, opts ...grpc.CallOption) (*WalletData, error) {
	out := new(WalletData)
	err := c.cc.Invoke(ctx, "/Bc/GetSpendableOutpoints", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bcClient) GetSpendableCollateral(ctx context.Context, in *GetSpendableCollateralRequest, opts ...grpc.CallOption) (*GetSpendableCollateralResponse, error) {
	out := new(GetSpendableCollateralResponse)
	err := c.cc.Invoke(ctx, "/Bc/GetSpendableCollateral", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bcClient) GetUnlockTakerTxParams(ctx context.Context, in *GetUnlockTakerTxParamsRequest, opts ...grpc.CallOption) (*GetUnlockTakerTxParamsResponse, error) {
	out := new(GetUnlockTakerTxParamsResponse)
	err := c.cc.Invoke(ctx, "/Bc/GetUnlockTakerTxParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bcClient) GetByteFeeMultiplier(ctx context.Context, in *Null, opts ...grpc.CallOption) (*GetByteFeeResponse, error) {
	out := new(GetByteFeeResponse)
	err := c.cc.Invoke(ctx, "/Bc/GetByteFeeMultiplier", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bcClient) GetTransfers(ctx context.Context, in *TransferRequest, opts ...grpc.CallOption) (*TransferResponse, error) {
	out := new(TransferResponse)
	err := c.cc.Invoke(ctx, "/Bc/GetTransfers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bcClient) GetOpenOrders(ctx context.Context, in *GetSpendableCollateralRequest, opts ...grpc.CallOption) (*GetOpenOrdersResponse, error) {
	out := new(GetOpenOrdersResponse)
	err := c.cc.Invoke(ctx, "/Bc/GetOpenOrders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bcClient) GetMatchedOrders(ctx context.Context, in *GetSpendableCollateralRequest, opts ...grpc.CallOption) (*GetMatchedOrdersResponse, error) {
	out := new(GetMatchedOrdersResponse)
	err := c.cc.Invoke(ctx, "/Bc/GetMatchedOrders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bcClient) GetHistoricalOrders(ctx context.Context, in *GetHistoryRequest, opts ...grpc.CallOption) (*GetHistoricalOrdersResponse, error) {
	out := new(GetHistoricalOrdersResponse)
	err := c.cc.Invoke(ctx, "/Bc/GetHistoricalOrders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bcClient) GetUnmatchedOrders(ctx context.Context, in *GetBalanceRequest, opts ...grpc.CallOption) (*GetOpenOrdersResponse, error) {
	out := new(GetOpenOrdersResponse)
	err := c.cc.Invoke(ctx, "/Bc/GetUnmatchedOrders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bcClient) GetUTXOLength(ctx context.Context, in *GetUtxoLengthRequest, opts ...grpc.CallOption) (*GetUtxoLengthResponse, error) {
	out := new(GetUtxoLengthResponse)
	err := c.cc.Invoke(ctx, "/Bc/GetUTXOLength", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bcClient) GetSTXOLength(ctx context.Context, in *GetUtxoLengthRequest, opts ...grpc.CallOption) (*GetUtxoLengthResponse, error) {
	out := new(GetUtxoLengthResponse)
	err := c.cc.Invoke(ctx, "/Bc/GetSTXOLength", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bcClient) GetBlake2Bl(ctx context.Context, in *GetBlake2BlRequest, opts ...grpc.CallOption) (*GetBlake2BlResponse, error) {
	out := new(GetBlake2BlResponse)
	err := c.cc.Invoke(ctx, "/Bc/GetBlake2bl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bcClient) GetBcAddressViaVanity(ctx context.Context, in *VanityConvertRequest, opts ...grpc.CallOption) (*VanityConvertResponse, error) {
	out := new(VanityConvertResponse)
	err := c.cc.Invoke(ctx, "/Bc/GetBcAddressViaVanity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bcClient) GetCurrentWork(ctx context.Context, in *Null, opts ...grpc.CallOption) (*CurrentWork, error) {
	out := new(CurrentWork)
	err := c.cc.Invoke(ctx, "/Bc/GetCurrentWork", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bcClient) GetSyncStatus(ctx context.Context, in *Null, opts ...grpc.CallOption) (*SyncStatus, error) {
	out := new(SyncStatus)
	err := c.cc.Invoke(ctx, "/Bc/GetSyncStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bcClient) GetFastSyncStatus(ctx context.Context, in *Null, opts ...grpc.CallOption) (*SyncStatus, error) {
	out := new(SyncStatus)
	err := c.cc.Invoke(ctx, "/Bc/GetFastSyncStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BcServer is the server API for Bc service.
// All implementations must embed UnimplementedBcServer
// for forward compatibility
type BcServer interface {
	GetRoveredBlockHash(context.Context, *GetRoveredBlockHashRequest) (*Block, error)
	GetRoveredBlockHeight(context.Context, *GetRoveredBlockHeightRequest) (*Block, error)
	GetRoveredBlocks(context.Context, *GetRoveredBlocksRequest) (*GetRoveredBlocksResponse, error)
	GetLatestRoveredBlocks(context.Context, *Null) (*GetRoveredBlocksResponse, error)
	GetNrgSupply(context.Context, *Null) (*GetNrgSupplyResponse, error)
	GetBlockHash(context.Context, *GetBlockHashRequest) (*BcBlock, error)
	GetBlockHeight(context.Context, *GetBlockHeightRequest) (*BcBlock, error)
	GetBlocksHeight(context.Context, *GetBlockHeightRequest) (*GetBlocksResponse, error)
	GetBlocks(context.Context, *GetBlocksRequest) (*GetBlocksResponse, error)
	GetLatestBlock(context.Context, *Null) (*BcBlock, error)
	GetLatestUTXOBlock(context.Context, *Null) (*BcBlock, error)
	GetTx(context.Context, *GetTxRequest) (*Transaction, error)
	GetMarkedTx(context.Context, *GetMarkedTxRequest) (*MarkedTransaction, error)
	GetMarkedTxsForMatchedOrder(context.Context, *GetOutPointRequest) (*GetMarkedTxs, error)
	GetTradeStatus(context.Context, *GetOutPointRequest) (*GetTradeStatusResponse, error)
	GetOutpointStatus(context.Context, *GetOutPointRequest) (*GetOutPointStatusResponse, error)
	GetTxClaimedBy(context.Context, *GetOutPointRequest) (*Transaction, error)
	GetRawMempool(context.Context, *Null) (*GetRawMempoolResponse, error)
	GetBlockByTx(context.Context, *GetTxRequest) (*BcBlock, error)
	GetRoveredBlockForMarkedTx(context.Context, *GetMarkedTxRequest) (*Block, error)
	Help(context.Context, *Null) (*HelpResponse, error)
	Stats(context.Context, *Null) (*StatsResponse, error)
	GetSettings(context.Context, *Null) (*SettingsResponse, error)
	NewTx(context.Context, *RpcTransaction) (*RpcTransactionResponse, error)
	SendTx(context.Context, *Transaction) (*RpcTransactionResponse, error)
	GetEmbBalance(context.Context, *GetBalanceRequest) (*GetEmbBalanceResponse, error)
	GetBalance(context.Context, *GetBalanceRequest) (*GetBalanceResponse, error)
	GetWallet(context.Context, *GetBalanceRequest) (*WalletData, error)
	GetSpendableOutpoints(context.Context, *GetSpendableCollateralRequest) (*WalletData, error)
	GetSpendableCollateral(context.Context, *GetSpendableCollateralRequest) (*GetSpendableCollateralResponse, error)
	GetUnlockTakerTxParams(context.Context, *GetUnlockTakerTxParamsRequest) (*GetUnlockTakerTxParamsResponse, error)
	GetByteFeeMultiplier(context.Context, *Null) (*GetByteFeeResponse, error)
	GetTransfers(context.Context, *TransferRequest) (*TransferResponse, error)
	GetOpenOrders(context.Context, *GetSpendableCollateralRequest) (*GetOpenOrdersResponse, error)
	GetMatchedOrders(context.Context, *GetSpendableCollateralRequest) (*GetMatchedOrdersResponse, error)
	GetHistoricalOrders(context.Context, *GetHistoryRequest) (*GetHistoricalOrdersResponse, error)
	GetUnmatchedOrders(context.Context, *GetBalanceRequest) (*GetOpenOrdersResponse, error)
	GetUTXOLength(context.Context, *GetUtxoLengthRequest) (*GetUtxoLengthResponse, error)
	GetSTXOLength(context.Context, *GetUtxoLengthRequest) (*GetUtxoLengthResponse, error)
	GetBlake2Bl(context.Context, *GetBlake2BlRequest) (*GetBlake2BlResponse, error)
	GetBcAddressViaVanity(context.Context, *VanityConvertRequest) (*VanityConvertResponse, error)
	GetCurrentWork(context.Context, *Null) (*CurrentWork, error)
	GetSyncStatus(context.Context, *Null) (*SyncStatus, error)
	GetFastSyncStatus(context.Context, *Null) (*SyncStatus, error)
	mustEmbedUnimplementedBcServer()
}

// UnimplementedBcServer must be embedded to have forward compatible implementations.
type UnimplementedBcServer struct {
}

func (UnimplementedBcServer) GetRoveredBlockHash(context.Context, *GetRoveredBlockHashRequest) (*Block, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoveredBlockHash not implemented")
}
func (UnimplementedBcServer) GetRoveredBlockHeight(context.Context, *GetRoveredBlockHeightRequest) (*Block, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoveredBlockHeight not implemented")
}
func (UnimplementedBcServer) GetRoveredBlocks(context.Context, *GetRoveredBlocksRequest) (*GetRoveredBlocksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoveredBlocks not implemented")
}
func (UnimplementedBcServer) GetLatestRoveredBlocks(context.Context, *Null) (*GetRoveredBlocksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLatestRoveredBlocks not implemented")
}
func (UnimplementedBcServer) GetNrgSupply(context.Context, *Null) (*GetNrgSupplyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNrgSupply not implemented")
}
func (UnimplementedBcServer) GetBlockHash(context.Context, *GetBlockHashRequest) (*BcBlock, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockHash not implemented")
}
func (UnimplementedBcServer) GetBlockHeight(context.Context, *GetBlockHeightRequest) (*BcBlock, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockHeight not implemented")
}
func (UnimplementedBcServer) GetBlocksHeight(context.Context, *GetBlockHeightRequest) (*GetBlocksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlocksHeight not implemented")
}
func (UnimplementedBcServer) GetBlocks(context.Context, *GetBlocksRequest) (*GetBlocksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlocks not implemented")
}
func (UnimplementedBcServer) GetLatestBlock(context.Context, *Null) (*BcBlock, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLatestBlock not implemented")
}
func (UnimplementedBcServer) GetLatestUTXOBlock(context.Context, *Null) (*BcBlock, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLatestUTXOBlock not implemented")
}
func (UnimplementedBcServer) GetTx(context.Context, *GetTxRequest) (*Transaction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTx not implemented")
}
func (UnimplementedBcServer) GetMarkedTx(context.Context, *GetMarkedTxRequest) (*MarkedTransaction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMarkedTx not implemented")
}
func (UnimplementedBcServer) GetMarkedTxsForMatchedOrder(context.Context, *GetOutPointRequest) (*GetMarkedTxs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMarkedTxsForMatchedOrder not implemented")
}
func (UnimplementedBcServer) GetTradeStatus(context.Context, *GetOutPointRequest) (*GetTradeStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTradeStatus not implemented")
}
func (UnimplementedBcServer) GetOutpointStatus(context.Context, *GetOutPointRequest) (*GetOutPointStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOutpointStatus not implemented")
}
func (UnimplementedBcServer) GetTxClaimedBy(context.Context, *GetOutPointRequest) (*Transaction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTxClaimedBy not implemented")
}
func (UnimplementedBcServer) GetRawMempool(context.Context, *Null) (*GetRawMempoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRawMempool not implemented")
}
func (UnimplementedBcServer) GetBlockByTx(context.Context, *GetTxRequest) (*BcBlock, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockByTx not implemented")
}
func (UnimplementedBcServer) GetRoveredBlockForMarkedTx(context.Context, *GetMarkedTxRequest) (*Block, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoveredBlockForMarkedTx not implemented")
}
func (UnimplementedBcServer) Help(context.Context, *Null) (*HelpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Help not implemented")
}
func (UnimplementedBcServer) Stats(context.Context, *Null) (*StatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stats not implemented")
}
func (UnimplementedBcServer) GetSettings(context.Context, *Null) (*SettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSettings not implemented")
}
func (UnimplementedBcServer) NewTx(context.Context, *RpcTransaction) (*RpcTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewTx not implemented")
}
func (UnimplementedBcServer) SendTx(context.Context, *Transaction) (*RpcTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendTx not implemented")
}
func (UnimplementedBcServer) GetEmbBalance(context.Context, *GetBalanceRequest) (*GetEmbBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEmbBalance not implemented")
}
func (UnimplementedBcServer) GetBalance(context.Context, *GetBalanceRequest) (*GetBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBalance not implemented")
}
func (UnimplementedBcServer) GetWallet(context.Context, *GetBalanceRequest) (*WalletData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWallet not implemented")
}
func (UnimplementedBcServer) GetSpendableOutpoints(context.Context, *GetSpendableCollateralRequest) (*WalletData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSpendableOutpoints not implemented")
}
func (UnimplementedBcServer) GetSpendableCollateral(context.Context, *GetSpendableCollateralRequest) (*GetSpendableCollateralResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSpendableCollateral not implemented")
}
func (UnimplementedBcServer) GetUnlockTakerTxParams(context.Context, *GetUnlockTakerTxParamsRequest) (*GetUnlockTakerTxParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUnlockTakerTxParams not implemented")
}
func (UnimplementedBcServer) GetByteFeeMultiplier(context.Context, *Null) (*GetByteFeeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByteFeeMultiplier not implemented")
}
func (UnimplementedBcServer) GetTransfers(context.Context, *TransferRequest) (*TransferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransfers not implemented")
}
func (UnimplementedBcServer) GetOpenOrders(context.Context, *GetSpendableCollateralRequest) (*GetOpenOrdersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOpenOrders not implemented")
}
func (UnimplementedBcServer) GetMatchedOrders(context.Context, *GetSpendableCollateralRequest) (*GetMatchedOrdersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMatchedOrders not implemented")
}
func (UnimplementedBcServer) GetHistoricalOrders(context.Context, *GetHistoryRequest) (*GetHistoricalOrdersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHistoricalOrders not implemented")
}
func (UnimplementedBcServer) GetUnmatchedOrders(context.Context, *GetBalanceRequest) (*GetOpenOrdersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUnmatchedOrders not implemented")
}
func (UnimplementedBcServer) GetUTXOLength(context.Context, *GetUtxoLengthRequest) (*GetUtxoLengthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUTXOLength not implemented")
}
func (UnimplementedBcServer) GetSTXOLength(context.Context, *GetUtxoLengthRequest) (*GetUtxoLengthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSTXOLength not implemented")
}
func (UnimplementedBcServer) GetBlake2Bl(context.Context, *GetBlake2BlRequest) (*GetBlake2BlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlake2Bl not implemented")
}
func (UnimplementedBcServer) GetBcAddressViaVanity(context.Context, *VanityConvertRequest) (*VanityConvertResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBcAddressViaVanity not implemented")
}
func (UnimplementedBcServer) GetCurrentWork(context.Context, *Null) (*CurrentWork, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrentWork not implemented")
}
func (UnimplementedBcServer) GetSyncStatus(context.Context, *Null) (*SyncStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSyncStatus not implemented")
}
func (UnimplementedBcServer) GetFastSyncStatus(context.Context, *Null) (*SyncStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFastSyncStatus not implemented")
}
func (UnimplementedBcServer) mustEmbedUnimplementedBcServer() {}

// UnsafeBcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BcServer will
// result in compilation errors.
type UnsafeBcServer interface {
	mustEmbedUnimplementedBcServer()
}

func RegisterBcServer(s grpc.ServiceRegistrar, srv BcServer) {
	s.RegisterService(&Bc_ServiceDesc, srv)
}

func _Bc_GetRoveredBlockHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoveredBlockHashRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BcServer).GetRoveredBlockHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Bc/GetRoveredBlockHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BcServer).GetRoveredBlockHash(ctx, req.(*GetRoveredBlockHashRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bc_GetRoveredBlockHeight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoveredBlockHeightRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BcServer).GetRoveredBlockHeight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Bc/GetRoveredBlockHeight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BcServer).GetRoveredBlockHeight(ctx, req.(*GetRoveredBlockHeightRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bc_GetRoveredBlocks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoveredBlocksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BcServer).GetRoveredBlocks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Bc/GetRoveredBlocks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BcServer).GetRoveredBlocks(ctx, req.(*GetRoveredBlocksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bc_GetLatestRoveredBlocks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Null)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BcServer).GetLatestRoveredBlocks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Bc/GetLatestRoveredBlocks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BcServer).GetLatestRoveredBlocks(ctx, req.(*Null))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bc_GetNrgSupply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Null)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BcServer).GetNrgSupply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Bc/GetNrgSupply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BcServer).GetNrgSupply(ctx, req.(*Null))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bc_GetBlockHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlockHashRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BcServer).GetBlockHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Bc/GetBlockHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BcServer).GetBlockHash(ctx, req.(*GetBlockHashRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bc_GetBlockHeight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlockHeightRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BcServer).GetBlockHeight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Bc/GetBlockHeight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BcServer).GetBlockHeight(ctx, req.(*GetBlockHeightRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bc_GetBlocksHeight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlockHeightRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BcServer).GetBlocksHeight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Bc/GetBlocksHeight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BcServer).GetBlocksHeight(ctx, req.(*GetBlockHeightRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bc_GetBlocks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlocksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BcServer).GetBlocks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Bc/GetBlocks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BcServer).GetBlocks(ctx, req.(*GetBlocksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bc_GetLatestBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Null)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BcServer).GetLatestBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Bc/GetLatestBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BcServer).GetLatestBlock(ctx, req.(*Null))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bc_GetLatestUTXOBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Null)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BcServer).GetLatestUTXOBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Bc/GetLatestUTXOBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BcServer).GetLatestUTXOBlock(ctx, req.(*Null))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bc_GetTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BcServer).GetTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Bc/GetTx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BcServer).GetTx(ctx, req.(*GetTxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bc_GetMarkedTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMarkedTxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BcServer).GetMarkedTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Bc/GetMarkedTx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BcServer).GetMarkedTx(ctx, req.(*GetMarkedTxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bc_GetMarkedTxsForMatchedOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOutPointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BcServer).GetMarkedTxsForMatchedOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Bc/GetMarkedTxsForMatchedOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BcServer).GetMarkedTxsForMatchedOrder(ctx, req.(*GetOutPointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bc_GetTradeStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOutPointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BcServer).GetTradeStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Bc/GetTradeStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BcServer).GetTradeStatus(ctx, req.(*GetOutPointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bc_GetOutpointStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOutPointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BcServer).GetOutpointStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Bc/GetOutpointStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BcServer).GetOutpointStatus(ctx, req.(*GetOutPointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bc_GetTxClaimedBy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOutPointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BcServer).GetTxClaimedBy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Bc/GetTxClaimedBy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BcServer).GetTxClaimedBy(ctx, req.(*GetOutPointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bc_GetRawMempool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Null)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BcServer).GetRawMempool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Bc/GetRawMempool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BcServer).GetRawMempool(ctx, req.(*Null))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bc_GetBlockByTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BcServer).GetBlockByTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Bc/GetBlockByTx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BcServer).GetBlockByTx(ctx, req.(*GetTxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bc_GetRoveredBlockForMarkedTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMarkedTxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BcServer).GetRoveredBlockForMarkedTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Bc/GetRoveredBlockForMarkedTx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BcServer).GetRoveredBlockForMarkedTx(ctx, req.(*GetMarkedTxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bc_Help_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Null)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BcServer).Help(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Bc/Help",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BcServer).Help(ctx, req.(*Null))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bc_Stats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Null)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BcServer).Stats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Bc/Stats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BcServer).Stats(ctx, req.(*Null))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bc_GetSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Null)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BcServer).GetSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Bc/GetSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BcServer).GetSettings(ctx, req.(*Null))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bc_NewTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RpcTransaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BcServer).NewTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Bc/NewTx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BcServer).NewTx(ctx, req.(*RpcTransaction))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bc_SendTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Transaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BcServer).SendTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Bc/SendTx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BcServer).SendTx(ctx, req.(*Transaction))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bc_GetEmbBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BcServer).GetEmbBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Bc/GetEmbBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BcServer).GetEmbBalance(ctx, req.(*GetBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bc_GetBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BcServer).GetBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Bc/GetBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BcServer).GetBalance(ctx, req.(*GetBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bc_GetWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BcServer).GetWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Bc/GetWallet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BcServer).GetWallet(ctx, req.(*GetBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bc_GetSpendableOutpoints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSpendableCollateralRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BcServer).GetSpendableOutpoints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Bc/GetSpendableOutpoints",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BcServer).GetSpendableOutpoints(ctx, req.(*GetSpendableCollateralRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bc_GetSpendableCollateral_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSpendableCollateralRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BcServer).GetSpendableCollateral(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Bc/GetSpendableCollateral",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BcServer).GetSpendableCollateral(ctx, req.(*GetSpendableCollateralRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bc_GetUnlockTakerTxParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUnlockTakerTxParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BcServer).GetUnlockTakerTxParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Bc/GetUnlockTakerTxParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BcServer).GetUnlockTakerTxParams(ctx, req.(*GetUnlockTakerTxParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bc_GetByteFeeMultiplier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Null)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BcServer).GetByteFeeMultiplier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Bc/GetByteFeeMultiplier",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BcServer).GetByteFeeMultiplier(ctx, req.(*Null))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bc_GetTransfers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BcServer).GetTransfers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Bc/GetTransfers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BcServer).GetTransfers(ctx, req.(*TransferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bc_GetOpenOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSpendableCollateralRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BcServer).GetOpenOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Bc/GetOpenOrders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BcServer).GetOpenOrders(ctx, req.(*GetSpendableCollateralRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bc_GetMatchedOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSpendableCollateralRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BcServer).GetMatchedOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Bc/GetMatchedOrders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BcServer).GetMatchedOrders(ctx, req.(*GetSpendableCollateralRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bc_GetHistoricalOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BcServer).GetHistoricalOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Bc/GetHistoricalOrders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BcServer).GetHistoricalOrders(ctx, req.(*GetHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bc_GetUnmatchedOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BcServer).GetUnmatchedOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Bc/GetUnmatchedOrders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BcServer).GetUnmatchedOrders(ctx, req.(*GetBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bc_GetUTXOLength_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUtxoLengthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BcServer).GetUTXOLength(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Bc/GetUTXOLength",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BcServer).GetUTXOLength(ctx, req.(*GetUtxoLengthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bc_GetSTXOLength_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUtxoLengthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BcServer).GetSTXOLength(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Bc/GetSTXOLength",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BcServer).GetSTXOLength(ctx, req.(*GetUtxoLengthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bc_GetBlake2Bl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlake2BlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BcServer).GetBlake2Bl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Bc/GetBlake2bl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BcServer).GetBlake2Bl(ctx, req.(*GetBlake2BlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bc_GetBcAddressViaVanity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VanityConvertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BcServer).GetBcAddressViaVanity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Bc/GetBcAddressViaVanity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BcServer).GetBcAddressViaVanity(ctx, req.(*VanityConvertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bc_GetCurrentWork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Null)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BcServer).GetCurrentWork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Bc/GetCurrentWork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BcServer).GetCurrentWork(ctx, req.(*Null))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bc_GetSyncStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Null)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BcServer).GetSyncStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Bc/GetSyncStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BcServer).GetSyncStatus(ctx, req.(*Null))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bc_GetFastSyncStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Null)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BcServer).GetFastSyncStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Bc/GetFastSyncStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BcServer).GetFastSyncStatus(ctx, req.(*Null))
	}
	return interceptor(ctx, in, info, handler)
}

// Bc_ServiceDesc is the grpc.ServiceDesc for Bc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Bc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Bc",
	HandlerType: (*BcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRoveredBlockHash",
			Handler:    _Bc_GetRoveredBlockHash_Handler,
		},
		{
			MethodName: "GetRoveredBlockHeight",
			Handler:    _Bc_GetRoveredBlockHeight_Handler,
		},
		{
			MethodName: "GetRoveredBlocks",
			Handler:    _Bc_GetRoveredBlocks_Handler,
		},
		{
			MethodName: "GetLatestRoveredBlocks",
			Handler:    _Bc_GetLatestRoveredBlocks_Handler,
		},
		{
			MethodName: "GetNrgSupply",
			Handler:    _Bc_GetNrgSupply_Handler,
		},
		{
			MethodName: "GetBlockHash",
			Handler:    _Bc_GetBlockHash_Handler,
		},
		{
			MethodName: "GetBlockHeight",
			Handler:    _Bc_GetBlockHeight_Handler,
		},
		{
			MethodName: "GetBlocksHeight",
			Handler:    _Bc_GetBlocksHeight_Handler,
		},
		{
			MethodName: "GetBlocks",
			Handler:    _Bc_GetBlocks_Handler,
		},
		{
			MethodName: "GetLatestBlock",
			Handler:    _Bc_GetLatestBlock_Handler,
		},
		{
			MethodName: "GetLatestUTXOBlock",
			Handler:    _Bc_GetLatestUTXOBlock_Handler,
		},
		{
			MethodName: "GetTx",
			Handler:    _Bc_GetTx_Handler,
		},
		{
			MethodName: "GetMarkedTx",
			Handler:    _Bc_GetMarkedTx_Handler,
		},
		{
			MethodName: "GetMarkedTxsForMatchedOrder",
			Handler:    _Bc_GetMarkedTxsForMatchedOrder_Handler,
		},
		{
			MethodName: "GetTradeStatus",
			Handler:    _Bc_GetTradeStatus_Handler,
		},
		{
			MethodName: "GetOutpointStatus",
			Handler:    _Bc_GetOutpointStatus_Handler,
		},
		{
			MethodName: "GetTxClaimedBy",
			Handler:    _Bc_GetTxClaimedBy_Handler,
		},
		{
			MethodName: "GetRawMempool",
			Handler:    _Bc_GetRawMempool_Handler,
		},
		{
			MethodName: "GetBlockByTx",
			Handler:    _Bc_GetBlockByTx_Handler,
		},
		{
			MethodName: "GetRoveredBlockForMarkedTx",
			Handler:    _Bc_GetRoveredBlockForMarkedTx_Handler,
		},
		{
			MethodName: "Help",
			Handler:    _Bc_Help_Handler,
		},
		{
			MethodName: "Stats",
			Handler:    _Bc_Stats_Handler,
		},
		{
			MethodName: "GetSettings",
			Handler:    _Bc_GetSettings_Handler,
		},
		{
			MethodName: "NewTx",
			Handler:    _Bc_NewTx_Handler,
		},
		{
			MethodName: "SendTx",
			Handler:    _Bc_SendTx_Handler,
		},
		{
			MethodName: "GetEmbBalance",
			Handler:    _Bc_GetEmbBalance_Handler,
		},
		{
			MethodName: "GetBalance",
			Handler:    _Bc_GetBalance_Handler,
		},
		{
			MethodName: "GetWallet",
			Handler:    _Bc_GetWallet_Handler,
		},
		{
			MethodName: "GetSpendableOutpoints",
			Handler:    _Bc_GetSpendableOutpoints_Handler,
		},
		{
			MethodName: "GetSpendableCollateral",
			Handler:    _Bc_GetSpendableCollateral_Handler,
		},
		{
			MethodName: "GetUnlockTakerTxParams",
			Handler:    _Bc_GetUnlockTakerTxParams_Handler,
		},
		{
			MethodName: "GetByteFeeMultiplier",
			Handler:    _Bc_GetByteFeeMultiplier_Handler,
		},
		{
			MethodName: "GetTransfers",
			Handler:    _Bc_GetTransfers_Handler,
		},
		{
			MethodName: "GetOpenOrders",
			Handler:    _Bc_GetOpenOrders_Handler,
		},
		{
			MethodName: "GetMatchedOrders",
			Handler:    _Bc_GetMatchedOrders_Handler,
		},
		{
			MethodName: "GetHistoricalOrders",
			Handler:    _Bc_GetHistoricalOrders_Handler,
		},
		{
			MethodName: "GetUnmatchedOrders",
			Handler:    _Bc_GetUnmatchedOrders_Handler,
		},
		{
			MethodName: "GetUTXOLength",
			Handler:    _Bc_GetUTXOLength_Handler,
		},
		{
			MethodName: "GetSTXOLength",
			Handler:    _Bc_GetSTXOLength_Handler,
		},
		{
			MethodName: "GetBlake2bl",
			Handler:    _Bc_GetBlake2Bl_Handler,
		},
		{
			MethodName: "GetBcAddressViaVanity",
			Handler:    _Bc_GetBcAddressViaVanity_Handler,
		},
		{
			MethodName: "GetCurrentWork",
			Handler:    _Bc_GetCurrentWork_Handler,
		},
		{
			MethodName: "GetSyncStatus",
			Handler:    _Bc_GetSyncStatus_Handler,
		},
		{
			MethodName: "GetFastSyncStatus",
			Handler:    _Bc_GetFastSyncStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bc.proto",
}
